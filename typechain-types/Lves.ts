/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LvesInterface extends utils.Interface {
  functions: {
    "addEntry(string,string)": FunctionFragment;
    "addUser()": FunctionFragment;
    "archiveUser()": FunctionFragment;
    "getUserEntries()": FunctionFragment;
    "isActive()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeEntry(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "toggleActive()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userExists()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addEntry",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "addUser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "archiveUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEntries",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeEntry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userExists",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addEntry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "archiveUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userExists", data: BytesLike): Result;

  events: {
    "LogEntriesRecieved(address)": EventFragment;
    "LogEntryAdded(address,string,string)": EventFragment;
    "LogRemoveEntry(address,uint256)": EventFragment;
    "LogToggleActive(bool)": EventFragment;
    "LogUserAdded(address)": EventFragment;
    "LogUserArchived(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogEntriesRecieved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogEntryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveEntry"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogToggleActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUserArchived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LogEntriesRecievedEvent = TypedEvent<
  [string],
  { userAddress: string }
>;

export type LogEntriesRecievedEventFilter =
  TypedEventFilter<LogEntriesRecievedEvent>;

export type LogEntryAddedEvent = TypedEvent<
  [string, string, string],
  { userAddress: string; createdAt: string; text: string }
>;

export type LogEntryAddedEventFilter = TypedEventFilter<LogEntryAddedEvent>;

export type LogRemoveEntryEvent = TypedEvent<
  [string, BigNumber],
  { userAddress: string; index: BigNumber }
>;

export type LogRemoveEntryEventFilter = TypedEventFilter<LogRemoveEntryEvent>;

export type LogToggleActiveEvent = TypedEvent<[boolean], { isActive: boolean }>;

export type LogToggleActiveEventFilter = TypedEventFilter<LogToggleActiveEvent>;

export type LogUserAddedEvent = TypedEvent<[string], { userAddress: string }>;

export type LogUserAddedEventFilter = TypedEventFilter<LogUserAddedEvent>;

export type LogUserArchivedEvent = TypedEvent<
  [string],
  { userAddress: string }
>;

export type LogUserArchivedEventFilter = TypedEventFilter<LogUserArchivedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Lves extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LvesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addEntry(
      createdAt: string,
      text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    archiveUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserEntries(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { entries: string[]; createdAt: string[] }
    >;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeEntry(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userExists(overrides?: CallOverrides): Promise<[boolean]>;
  };

  addEntry(
    createdAt: string,
    text: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addUser(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  archiveUser(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserEntries(
    overrides?: CallOverrides
  ): Promise<[string[], string[]] & { entries: string[]; createdAt: string[] }>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeEntry(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleActive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userExists(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addEntry(
      createdAt: string,
      text: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addUser(overrides?: CallOverrides): Promise<void>;

    archiveUser(overrides?: CallOverrides): Promise<void>;

    getUserEntries(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { entries: string[]; createdAt: string[] }
    >;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeEntry(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    toggleActive(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userExists(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "LogEntriesRecieved(address)"(
      userAddress?: null
    ): LogEntriesRecievedEventFilter;
    LogEntriesRecieved(userAddress?: null): LogEntriesRecievedEventFilter;

    "LogEntryAdded(address,string,string)"(
      userAddress?: null,
      createdAt?: null,
      text?: null
    ): LogEntryAddedEventFilter;
    LogEntryAdded(
      userAddress?: null,
      createdAt?: null,
      text?: null
    ): LogEntryAddedEventFilter;

    "LogRemoveEntry(address,uint256)"(
      userAddress?: null,
      index?: null
    ): LogRemoveEntryEventFilter;
    LogRemoveEntry(userAddress?: null, index?: null): LogRemoveEntryEventFilter;

    "LogToggleActive(bool)"(isActive?: null): LogToggleActiveEventFilter;
    LogToggleActive(isActive?: null): LogToggleActiveEventFilter;

    "LogUserAdded(address)"(userAddress?: null): LogUserAddedEventFilter;
    LogUserAdded(userAddress?: null): LogUserAddedEventFilter;

    "LogUserArchived(address)"(userAddress?: null): LogUserArchivedEventFilter;
    LogUserArchived(userAddress?: null): LogUserArchivedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addEntry(
      createdAt: string,
      text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    archiveUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserEntries(overrides?: CallOverrides): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeEntry(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userExists(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addEntry(
      createdAt: string,
      text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    archiveUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserEntries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeEntry(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userExists(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
